{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `hbb_common`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"links/mod.rs","byte_start":322,"byte_end":332,"line_start":12,"line_end":12,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use hbb_common::{","highlight_start":5,"highlight_end":15}],"label":"use of unresolved module or unlinked crate `hbb_common`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `hbb_common`, use `cargo add hbb_common` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `hbb_common`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlinks/mod.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse hbb_common::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `hbb_common`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `hbb_common`, use `cargo add hbb_common` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `hbb_common`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"links/mod.rs","byte_start":322,"byte_end":332,"line_start":12,"line_end":12,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use hbb_common::{","highlight_start":5,"highlight_end":15}],"label":"use of unresolved module or unlinked crate `hbb_common`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `hbb_common`, use `cargo add hbb_common` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `hbb_common`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlinks/mod.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse hbb_common::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `hbb_common`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `hbb_common`, use `cargo add hbb_common` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `DEFAULT_CONN` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"types/mod.rs","byte_start":315,"byte_end":327,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    DEFAULT_CONN,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_camel_case_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"types/mod.rs","byte_start":315,"byte_end":327,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    DEFAULT_CONN,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"DefaultConn","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `DEFAULT_CONN` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtypes/mod.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DEFAULT_CONN,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `DefaultConn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_camel_case_types)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `FILE_TRANSFER` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"types/mod.rs","byte_start":333,"byte_end":346,"line_start":12,"line_end":12,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    FILE_TRANSFER,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"types/mod.rs","byte_start":333,"byte_end":346,"line_start":12,"line_end":12,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    FILE_TRANSFER,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":"FileTransfer","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `FILE_TRANSFER` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtypes/mod.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    FILE_TRANSFER,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `FileTransfer`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `PORT_FORWARD` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"types/mod.rs","byte_start":352,"byte_end":364,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    PORT_FORWARD,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"types/mod.rs","byte_start":352,"byte_end":364,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    PORT_FORWARD,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"PortForward","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `PORT_FORWARD` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtypes/mod.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PORT_FORWARD,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `PortForward`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `before` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":669,"byte_end":673,"line_start":29,"line_end":29,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    async fn before(&self, name: &str, ctx: &Context) {","highlight_start":34,"highlight_end":38}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::LoggingMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::LoggingMiddleware, &'life1 str, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":669,"byte_end":673,"line_start":29,"line_end":29,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    async fn before(&self, name: &str, ctx: &Context) {","highlight_start":34,"highlight_end":38}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `before` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:29:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn before(&self, name: &str, ctx: &Context) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::LoggingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m              found signature `fn(&'life0 middleware::LoggingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn before(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn before(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `after` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":970,"byte_end":974,"line_start":37,"line_end":37,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    async fn after(&self, name: &str, ctx: &Context) {","highlight_start":33,"highlight_end":37}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::LoggingMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::LoggingMiddleware, &'life1 str, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":970,"byte_end":974,"line_start":37,"line_end":37,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    async fn after(&self, name: &str, ctx: &Context) {","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `after` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:37:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn after(&self, name: &str, ctx: &Context) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::LoggingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m              found signature `fn(&'life0 middleware::LoggingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn after(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn after(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `on_error` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":1274,"byte_end":1278,"line_start":45,"line_end":45,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"    async fn on_error(&self, name: &str, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {","highlight_start":36,"highlight_end":40}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::LoggingMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>, &'life3 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::LoggingMiddleware, &'life1 str, &'life2 codeuchain::Context, &'life3 std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":1274,"byte_end":1278,"line_start":45,"line_end":45,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"    async fn on_error(&self, name: &str, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {","highlight_start":36,"highlight_end":40}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `on_error` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:45:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn on_error(&self, name: &str, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::LoggingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>\u001b[0m\u001b[0m, &'life3 \u001b[0m\u001b[0m\u001b[1m\u001b[35mcodeuchain::Context\u001b[0m\u001b[0m) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m              found signature `fn(&'life0 middleware::LoggingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 \u001b[0m\u001b[0m\u001b[1m\u001b[35mcodeuchain::Context\u001b[0m\u001b[0m, &'life3 \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>\u001b[0m\u001b[0m) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn on_error(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn on_error(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `before` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":2945,"byte_end":2949,"line_start":98,"line_end":98,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    async fn before(&self, name: &str, _ctx: &Context) {","highlight_start":34,"highlight_end":38}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::PerformanceMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::PerformanceMiddleware, &'life1 str, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":2945,"byte_end":2949,"line_start":98,"line_end":98,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    async fn before(&self, name: &str, _ctx: &Context) {","highlight_start":34,"highlight_end":38}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `before` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:98:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn before(&self, name: &str, _ctx: &Context) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::PerformanceMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m              found signature `fn(&'life0 middleware::PerformanceMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn before(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, _ctx: &Context) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn before(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, _ctx: &Context) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `after` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":3284,"byte_end":3288,"line_start":106,"line_end":106,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    async fn after(&self, name: &str, _ctx: &Context) {","highlight_start":33,"highlight_end":37}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::PerformanceMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::PerformanceMiddleware, &'life1 str, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":3284,"byte_end":3288,"line_start":106,"line_end":106,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    async fn after(&self, name: &str, _ctx: &Context) {","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `after` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:106:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn after(&self, name: &str, _ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::PerformanceMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(&'life0 middleware::PerformanceMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn after(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, _ctx: &Context) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn after(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, _ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `on_error` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":3660,"byte_end":3664,"line_start":115,"line_end":115,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"    async fn on_error(&self, name: &str, _ctx: &Context, _err: &Box<dyn std::error::Error + Send + Sync>) {","highlight_start":36,"highlight_end":40}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::PerformanceMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>, &'life3 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::PerformanceMiddleware, &'life1 str, &'life2 codeuchain::Context, &'life3 std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":3660,"byte_end":3664,"line_start":115,"line_end":115,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"    async fn on_error(&self, name: &str, _ctx: &Context, _err: &Box<dyn std::error::Error + Send + Sync>) {","highlight_start":36,"highlight_end":40}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `on_error` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:115:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn on_error(&self, name: &str, _ctx: &Context, _err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::PerformanceMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>\u001b[0m\u001b[0m, &'life3 \u001b[0m\u001b[0m\u001b[1m\u001b[35mcodeuchain::Context\u001b[0m\u001b[0m) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(&'life0 middleware::PerformanceMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 \u001b[0m\u001b[0m\u001b[1m\u001b[35mcodeuchain::Context\u001b[0m\u001b[0m, &'life3 \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>\u001b[0m\u001b[0m) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn on_error(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, _ctx: &Context, _err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn on_error(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, _ctx: &Context, _err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `before` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":4417,"byte_end":4421,"line_start":147,"line_end":147,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    async fn before(&self, name: &str, ctx: &Context) {","highlight_start":34,"highlight_end":38}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::ErrorHandlingMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::ErrorHandlingMiddleware, &'life1 str, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":4417,"byte_end":4421,"line_start":147,"line_end":147,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    async fn before(&self, name: &str, ctx: &Context) {","highlight_start":34,"highlight_end":38}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `before` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:147:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn before(&self, name: &str, ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::ErrorHandlingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(&'life0 middleware::ErrorHandlingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn before(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn before(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `after` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":4918,"byte_end":4922,"line_start":158,"line_end":158,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    async fn after(&self, name: &str, ctx: &Context) {","highlight_start":33,"highlight_end":37}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::ErrorHandlingMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::ErrorHandlingMiddleware, &'life1 str, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":4918,"byte_end":4922,"line_start":158,"line_end":158,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    async fn after(&self, name: &str, ctx: &Context) {","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `after` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:158:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn after(&self, name: &str, ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::ErrorHandlingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(&'life0 middleware::ErrorHandlingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn after(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn after(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `on_error` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":5407,"byte_end":5411,"line_start":169,"line_end":169,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"    async fn on_error(&self, name: &str, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {","highlight_start":36,"highlight_end":40}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::ErrorHandlingMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>, &'life3 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::ErrorHandlingMiddleware, &'life1 str, &'life2 codeuchain::Context, &'life3 std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":5407,"byte_end":5411,"line_start":169,"line_end":169,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"    async fn on_error(&self, name: &str, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {","highlight_start":36,"highlight_end":40}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `on_error` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:169:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn on_error(&self, name: &str, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::ErrorHandlingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>\u001b[0m\u001b[0m, &'life3 \u001b[0m\u001b[0m\u001b[1m\u001b[35mcodeuchain::Context\u001b[0m\u001b[0m) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(&'life0 middleware::ErrorHandlingMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 \u001b[0m\u001b[0m\u001b[1m\u001b[35mcodeuchain::Context\u001b[0m\u001b[0m, &'life3 \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>\u001b[0m\u001b[0m) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn on_error(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn on_error(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `before` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":6703,"byte_end":6707,"line_start":211,"line_end":211,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    async fn before(&self, name: &str, ctx: &Context) {","highlight_start":34,"highlight_end":38}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::SecurityMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::SecurityMiddleware, &'life1 str, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":6703,"byte_end":6707,"line_start":211,"line_end":211,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    async fn before(&self, name: &str, ctx: &Context) {","highlight_start":34,"highlight_end":38}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `before` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:211:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn before(&self, name: &str, ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::SecurityMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(&'life0 middleware::SecurityMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn before(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn before(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `after` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":8258,"byte_end":8262,"line_start":238,"line_end":238,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    async fn after(&self, name: &str, ctx: &Context) {","highlight_start":33,"highlight_end":37}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::SecurityMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::SecurityMiddleware, &'life1 str, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":8258,"byte_end":8262,"line_start":238,"line_end":238,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    async fn after(&self, name: &str, ctx: &Context) {","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `after` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:238:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn after(&self, name: &str, ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::SecurityMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(&'life0 middleware::SecurityMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn after(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn after(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, ctx: &Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `on_error` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"middleware/mod.rs","byte_start":8960,"byte_end":8964,"line_start":253,"line_end":253,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"    async fn on_error(&self, name: &str, _ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {","highlight_start":36,"highlight_end":40}],"label":"expected `Option<&dyn LegacyLink>`, found `&'life1 str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 middleware::SecurityMiddleware, std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>, &'life2 std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>, &'life3 codeuchain::Context) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 middleware::SecurityMiddleware, &'life1 str, &'life2 codeuchain::Context, &'life3 std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"middleware/mod.rs","byte_start":8960,"byte_end":8964,"line_start":253,"line_end":253,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"    async fn on_error(&self, name: &str, _ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {","highlight_start":36,"highlight_end":40}],"label":null,"suggested_replacement":"std::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `on_error` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mmiddleware/mod.rs:253:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn on_error(&self, name: &str, _ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<&dyn LegacyLink>`, found `&'life1 str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected signature `fn(&'life0 middleware::SecurityMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, &'life2 \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>\u001b[0m\u001b[0m, &'life3 \u001b[0m\u001b[0m\u001b[1m\u001b[35mcodeuchain::Context\u001b[0m\u001b[0m) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = std::result::Result<(), std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>>> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(&'life0 middleware::SecurityMiddleware, \u001b[0m\u001b[0m\u001b[1m\u001b[35m&'life1 str\u001b[0m\u001b[0m, &'life2 \u001b[0m\u001b[0m\u001b[1m\u001b[35mcodeuchain::Context\u001b[0m\u001b[0m, &'life3 \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>\u001b[0m\u001b[0m) -> std::pin::Pin<std::boxed::Box<\u001b[0m\u001b[0m\u001b[1m\u001b[35m(dyn std::future::Future<Output = ()> + std::marker::Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change the parameter type to match the trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    async fn on_error(&self, name: \u001b[0m\u001b[0m\u001b[38;5;9m&str\u001b[0m\u001b[0m, _ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    async fn on_error(&self, name: \u001b[0m\u001b[0m\u001b[38;5;10mstd::option::Option<&'life1 (dyn codeuchain::LegacyLink + 'life1)>\u001b[0m\u001b[0m, _ctx: &Context, err: &Box<dyn std::error::Error + Send + Sync>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 14 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 14 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0053, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0053, E0432, E0433.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0053`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0053`.\u001b[0m\n"}
